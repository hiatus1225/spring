<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<context:component-scan base-package="com.biz.**" />
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	
	<!-- 첨부파일 설정-->
	<mvc:resources mapping="/c/**" location="C:/uploads/" />
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="maxUploadSize" value="10000000"/>
	</bean>
	
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<!-- DBCP, ORM MapperInterface 설정 -->
	<context:property-placeholder location="classpath:*.properties" /> 
	<bean id="original_dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${uid}"></property>
        <property name="password" value="${upw}"></property>
    </bean>
    
    <!-- JDBC logConsole -->
    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
        <constructor-arg ref="original_dataSource" />
        <property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
                <property name="loggingType" value="MULTI_LINE" />
                <property name="sqlPrefix" value="SQL         :  "/>
            </bean>
        </property>
 	</bean>
    
    
    
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource" />
	  <property name="mapperLocations" value="classpath*:*-map.xml" />
	  <property name="configLocation" value="classpath:config-mybatis.xml" />
	</bean>
	<!-- @Repository MapperInterface를 사용할 경우 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.biz.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- @Repository DAOClass 사용할 경우 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean> 
	
	
	
	
	<!-- ************ 추가 기능 **************** -->
	<!-- AOP TX
	@Transactional 
	<tx:annotation-driven transaction-manager="txManager" />
	-->
	<aop:aspectj-autoproxy />
	
	<bean id="txManagerIDID" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdviceIDID" transaction-manager="txManagerIDID">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>                                                    <!-- com.biz.service.impl.*Impl -->  
		<aop:pointcut id="txPointcutIDID" expression="execution(public * com.biz..*Impl.*(..))"/>
		<aop:advisor advice-ref="txAdviceIDID" pointcut-ref="txPointcutIDID" />
	</aop:config>
	
	<!--
	Aspect.java 객체를 메모리에 등록하는 방법 
	1. <bean name="commonAspectNAMENAME" class="com.biz.common.CommonAspect"></bean>
	2. Aspect.java 파일 상단에 @Componet 설정
	-->
	
	<!--  
	<aop:config>
		xx<aop:aspect id="aspectIDID" ref="commonAspectNAMENAME">
			xx<aop:pointcut id="cutIDID" expression="execution( public * com.biz..*Impl.*(..) )" />
			<aop:before pointcut-ref="cutIDID" method="beforeMethod" />
			<aop:after pointcut-ref="cutIDID" method="afterMethod"/>
		</aop:aspect>
	</aop:config> 
	-->
	
	
	<!-- XML POJO 기반 설정 ==VS== @어노테이션으로 대체 가능
	<bean name="/logout" class="com.biz.user.LogoutController" />
	
	<bean scope="prototype" name="uvoNAMENAME" class="com.biz.user.UserVO" />
	
	<bean name="/login" class="com.biz.user.LoginController">
		<property  name="userServiceSETTER" ref="usvcNAMENAME" />
		<property  name="userVOSETTER" ref="uvoNAMENAME" />
		<constructor-arg ref="usvcNAMENAME" />
		<constructor-arg ref="uvoNAMENAME" />
		<constructor-arg value="C:/upload" />
	</bean>
	<bean name="usvcNAMENAME" class="com.biz.user.UserServiceImpl">
		<constructor-arg ref="udaoNAMENAME" />
		<property name="userDAOSETTER" ref="udaoNAMENAME" />
	</bean>
	<bean name="udaoNAMENAME" class="com.biz.user.UserDAO">
		<constructor-arg ref="dbNAMENAME" />
		<property name="dBSETTER" ref="dbNAMENAME" />
	</bean>
	<bean name="dbNAMENAME" class="com.biz.user.DBManager"></bean>
	 -->
	
</beans>
